#+TITLE: Hugoの記事をemacs Org Modeで書く
#+DATE: 2025-02-16T08:01:28+09:00
#+AUTHOR: K
#+DRAFT: false
#+TAGS[]: hugo
#+CATEGORIES: tech
* hugo new content
hugoで新しい記事を作る場合は ~hugo new content post.md~ でmarkdown形式のファイルを作ることができる。
orgの場合は ~archetypes~ に ~default.org~ というファイルを作って
#+begin_src org
#+TITLE: {{ replace .File.ContentBaseName "-" " " | title }}
#+DATE: {{ .Date }}
#+AUTHOR: K
#+DRAFT: true
#+TAGS[]:
#+CATEGORIES:
#+end_src
としておくと、 ~hugo new content post.org~ で初期化されたファイルが出力される。
ただ、これだとemacsを開くのが面倒なので ~capture~ を使って、hugoコマンドでファイルを生成した後に編集できるようにする。
* コード
#+begin_src lisp
(defun my/generate-hugo-article-file ()
  (let* ((title (read-string "Title: "))  ;; ユーザー入力を受け取る
         ;; (timestamp (format-time-string "%Y%m%d%H%M%S"))
         ;; (cmd (format "(cd ~/hugo/ks_room && hugo new content/post/%s-%s.org)" timestamp title))
         (hugo-dir "~/hugo/ks_room")
         (filename (concat title ".org"))
         (filepath (expand-file-name (concat "content/post/" filename) hugo-dir))
         (cmd (format "(cd %s && hugo new %s)" hugo-dir (shell-quote-argument filepath)))
         (output (shell-command-to-string cmd)))  ;; hugo new を実行
    (if (string-match-p "Content .* created" output)
        filepath  ;; 作成したファイルパスを返す
      (error "Failed to create Hugo post"))))  ;; エラーが発生した場合
#+end_src
- User inputでtitleを入力する
- hugo-dir: 適宜変更する
- file-path: "content/post" の部分はThemeによるのでここも適宜変更する
- cmd: hugoコマンドは ~hugo.toml~ があるフォルダでないと実行できないので移動してから実行する。
- shell-quote-argument: スペース等の文字列がはいっていても機能するようにエスケープする。
- shell-command-to-string: コマンドを実行
- 成功したらファイルパスを返す

~capture-template~ は以下のようにする。
#+begin_src elisp
(setq my-capture-templates
      '(("h" "Article for hugo" entry
         (file my/generate-hugo-article-file)
         "* %?"
         :unarrowed t
         :jump-to-captured t)))

(setq org-capture-templates my-capture-templates)
#+end_src

* 改善が必要なところ
- タイムスタンプをファイル名につけてしまうとTITLEにも付いてしまうからコメントアウトしている
- Capture時に ~C-k~ してもファイルは残ったまま

